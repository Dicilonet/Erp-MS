rules_version = '2';

// Reglas por defecto: denegar todo el acceso a menos que se permita explícitamente.
service cloud.firestore {
  match /databases/{database}/documents {
  
    // --- REGLAS DE USUARIOS INTERNOS ('users') ---
    match /users/{userId} {
      // Un usuario solo puede leer y escribir su propio perfil.
      allow read, write: if request.auth.uid == userId;
      // Un superadmin puede leer cualquier perfil.
      allow get: if request.auth.token.role == 'superadmin';
    }

    match /users/{userId}/todos/{todoId} {
      // Un usuario solo puede gestionar su propia lista de tareas.
      allow read, write, delete: if request.auth.uid == userId;
    }
    
    // --- REGLAS DE CLIENTES ('customers') ---
    match /customers/{customerId} {
       // Cualquier usuario autenticado puede leer la lista de clientes.
      allow read: if request.auth != null;
      // Solo superadmins pueden crear, modificar o borrar clientes.
      allow write: if request.auth.token.role == 'superadmin';
    }

    match /customers/{customerId}/{subcollection}/{docId} {
        // Los usuarios autenticados pueden leer y escribir en las subcolecciones de un cliente.
        // Esto cubre 'interactions', 'offers', 'customerServices'.
        allow read, write: if request.auth != null;
    }

    // --- REGLAS DE PROYECTOS ('projects') y TAREAS ('tasks') ---
    match /projects/{projectId} {
      // Un usuario puede leer un proyecto si es superadmin o si está en el equipo asignado.
      allow read: if request.auth.token.role == 'superadmin' || request.auth.uid in resource.data.assignedTeam;
      // Cualquiera autenticado puede crear un proyecto (para que los colaboradores puedan hacerlo).
      allow create: if request.auth != null;
      // Solo superadmins o miembros del equipo pueden actualizarlo.
      allow update: if request.auth.token.role == 'superadmin' || request.auth.uid in resource.data.assignedTeam;
       // Solo superadmins pueden borrar proyectos.
      allow delete: if request.auth.token.role == 'superadmin';
    }
    
    match /projects/{projectId}/tasks/{taskId} {
        // Para leer una tarea, debes tener permiso para leer el proyecto padre.
        allow read: if exists(/databases/$(database)/documents/projects/$(projectId)) && 
                      (request.auth.token.role == 'superadmin' || request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.assignedTeam);
        // Para escribir (crear/actualizar/borrar) una tarea, también debes tener permiso sobre el proyecto.
        allow write: if exists(/databases/$(database)/documents/projects/$(projectId)) && 
                       (request.auth.token.role == 'superadmin' || request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.assignedTeam);
    }
    
    // --- REGLAS PARA GASTOS ('expenses') ---
    match /expenses/{expenseId} {
      // Cualquier usuario autenticado puede leer o crear gastos.
      allow read, create: if request.auth != null;
      // Solo el creador o un superadmin pueden actualizar/borrar.
      allow update, delete: if request.auth.token.role == 'superadmin' || request.auth.uid == resource.data.recordedBy;
    }
    
    // --- REGLAS PARA ARTÍCULOS ('articles') ---
    match /articles/{articleId} {
       // Todos los usuarios autenticados pueden leer el catálogo de artículos.
       allow read: if request.auth != null;
       // Solo superadmins pueden añadir, editar o borrar artículos.
       allow write: if request.auth.token.role == 'superadmin';
    }
    
    // --- REGLAS PARA CONTADORES ('counters') ---
    // Usado por Cloud Functions para generar números de oferta/cupón secuenciales.
    match /counters/{counterId} {
      // Nadie puede acceder directamente, solo las Cloud Functions con credenciales de admin.
      allow read, write: if false;
    }
    
    // --- REGLAS PARA CONEXIONES ('connections' / 'programs') ---
    match /connections/{connectionId} {
       // Los usuarios autenticados pueden ver la lista de conexiones.
      allow read: if request.auth != null;
      // Solo un superadmin puede crear, editar o borrar conexiones.
      allow write: if request.auth.token.role == 'superadmin';
    }
    
     match /programs/{programId} {
       // Todos los usuarios autenticados pueden leer el catálogo de herramientas.
       allow read: if request.auth != null;
       // Todos los usuarios autenticados pueden editarlo.
       allow write: if request.auth != null;
    }

    // --- REGLAS PARA ACTIVOS DE CONTENIDO ('contentAssets') ---
    match /contentAssets/{assetId} {
        // Cualquiera autenticado puede leer y escribir en el pool de contenido.
        allow read, write: if request.auth != null;
    }
    
    // --- REGLAS PARA CALENDARIO DE MARKETING ('marketingSchedule') ---
    match /marketingSchedule/{eventId} {
       // Los usuarios autenticados pueden leer y escribir eventos del calendario.
        allow read, write: if request.auth != null;
    }

    // --- REGLAS PARA CHAT INTERNO ---
    match /conversations/{conversationId} {
      // Un usuario puede leer o escribir en una conversación si es uno de los participantes.
      allow read, write: if request.auth.uid in resource.data.participantUids;
    }
    
    match /conversations/{conversationId}/messages/{messageId} {
      // Un usuario puede leer mensajes de una conversación si es participante.
      allow read: if request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantUids;
      // Un usuario solo puede crear un mensaje si es el remitente y es participante.
      allow create: if request.auth.uid == request.resource.data.senderId &&
                       request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantUids;
      // Nadie puede editar o borrar mensajes.
      allow update, delete: if false;
    }
    
    // --- REGLAS PARA TICKETS DE SOPORTE ---
    match /tickets/{ticketId} {
        // Cualquiera autenticado puede leer la lista de tickets
        allow read: if request.auth != null;
        // Cualquiera autenticado puede crear un ticket.
        allow create: if request.auth != null;
        // Solo un superadmin o el agente asignado puede modificarlo.
        allow update: if request.auth.token.role == 'superadmin' || request.auth.uid == resource.data.assignedTo;
        // Solo un superadmin puede borrarlo.
        allow delete: if request.auth.token.role == 'superadmin';
    }

    // --- REGLAS PARA CUPONES ---
    match /coupons/{couponId} {
      // Cualquiera puede leer los datos de un cupón (necesario para la página de canje pública).
      allow read: if true;
      // Solo los superadmins pueden crear, actualizar o borrar cupones.
      allow write: if request.auth.token.role == 'superadmin';
    }
    
    // --- REGLAS PARA CONEXIONES SOCIALES (NUEVO) ---
    match /socialConnections/{connectionId} {
      // El usuario solo puede gestionar sus propias conexiones.
      allow read, write, delete: if request.auth.uid == resource.data.userId;
      // Un superadmin puede leer cualquier conexión (para tareas de diagnóstico).
      allow get: if request.auth.token.role == 'superadmin';
    }

    // --- REGLAS PARA POSTS PROGRAMADOS (NUEVO) ---
    match /scheduledPosts/{postId} {
      // El creador del post puede leerlo y borrarlo.
      allow read, delete: if request.auth.uid == resource.data.creatorId;
      // Un superadmin puede leer todos los posts.
      allow list: if request.auth.token.role == 'superadmin';
      // Cualquiera autenticado puede crear un post (la lógica de negocio está en la function).
      allow create: if request.auth != null;
      // Nadie puede actualizar un post directamente, se gestiona desde la función de publicación.
      allow update: if false;
    }
  }
}
